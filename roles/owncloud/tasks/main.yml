---
- name: build mariadb image
  docker_image:
    name: mymariadb
    build:
      path: "{{ role_path }}/files/"
      args:
        UID: "{{ owncloud_user_id }}"
        GID: "{{ owncloud_group_id }}"
    source: build
    state: present
    force_source: yes


- name: Create owncloud Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ owncloud_config_directory }}"

- name: check if mysql volume exists
  command: docker volume inspect mysql
  register: myvolume_exists
  failed_when: false

- name: create mysql volume
  command: docker volume create --name mysql
  when:
    - myvolume_exists is defined
    - myvolume_exists.stderr_lines is defined
    - myvolume_exists.stderr_lines is search("No such volume")

- name: redis
  docker_container:
    name: owncloud_redis
    log_driver: json-file
    log_options:
      max-size: 256m
      max-file: "1"
    image: webhippie/redis:latest
    networks:
      - name: "{{ nas_bridge_network }}"
    restart_policy: unless-stopped
    recreate: "{{ 'yes' if docker_recreate else 'no' }}"
    env:
      REDIS_DATABASES: "1"
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "{{ owncloud_config_directory }}/redis:/var/lib/redis"
    memory: 64m

- name: mariadb
  docker_container:
    name: owncloud_mariadb
    log_driver: json-file
    log_options:
      max-size: 256m
      max-file: "1"
    image: mymariadb:latest
#    image: mariadb:10.6
    networks:
      - name: "{{ nas_bridge_network }}"
    restart_policy: unless-stopped
    recreate: "{{ 'yes' if docker_recreate else 'no' }}"
    env:
      MARIADB_ROOT_PASSWORD: "owncloud"
      MARIADB_USERNAME: "owncloud"
      MARIADB_PASSWORD: "owncloud"
      MARIADB_DATABASE: "owncloud"
      MARIADB_MAX_ALLOWED_PACKET: "128M"
      MARIADB_INNODB_LOG_FILE_SIZE: "64M"
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "mysql:/var/lib/mysql:z"
      - "{{ owncloud_config_directory }}/backup:/var/lib/backup:z"
    memory: 128m
    labels:
      com.centurylinklabs.watchtower.enable: "false"

- name: owncloud
  docker_container:
    name: owncloud
    log_driver: json-file
    log_options:
      max-size: 256m
      max-file: "1"
    image: owncloud/server:latest
    networks:
      - name: "{{ nas_bridge_network }}"
        links:
          - "owncloud_mariadb:mariadb"
          - "owncloud_redis:redis"
    pull: true
    volumes:
      - "{{ owncloud_data_directory }}:/mnt/data:rw"
    env:
      TZ: "{{ ansible_nas_timezone }}"
      PUID: "{{ owncloud_user_id }}"
      PGID: "{{ owncloud_group_id }}"
      OWNCLOUD_DOMAIN: "{{ owncloud_domain }}"
      OWNCLOUD_DB_TYPE: "mysql"
      OWNCLOUD_DB_NAME: "owncloud"
      OWNCLOUD_DB_USERNAME: "owncloud"
      OWNCLOUD_DB_PASSWORD: "owncloud"
      OWNCLOUD_DB_HOST: "mariadb"
      OWNCLOUD_ADMIN_USERNAME: "{{ owncloud_user }}"
      OWNCLOUD_ADMIN_PASSWORD: "{{ owncloud_pass }}"
      OWNCLOUD_MYSQL_UTF8MB4: "true"
      OWNCLOUD_REDIS_ENABLED: "true"
      OWNCLOUD_REDIS_HOST: "redis"
      OWNCLOUD_TRUSTED_DOMAINS: "localhost,{{ owncloud_hostname }}.{{ ansible_nas_domain }}"
    restart_policy: unless-stopped
    recreate: "{{ 'yes' if docker_recreate else 'no' }}"
    memory: 1g
    labels:
      traefik.enable: "{{ owncloud_available_externally }}"
      traefik.http.routers.owncloud.entrypoints: "websecure,websecure-ext"
      traefik.http.routers.owncloud.rule: "Host(`{{ owncloud_hostname }}.{{ ansible_nas_domain }}`)"
      traefik.http.routers.owncloud.tls.domains[0].main: "{{ ansible_nas_domain }}"
      traefik.http.routers.owncloud.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
      traefik.http.services.owncloud.loadbalancer.server.port: "8080"
      # Middleware to set the Content-Security-Policy header
      traefik.http.middlewares.csp-headers.headers.customResponseHeaders.Content-Security-Policy: "frame-ancestors organizr.shazbot.one"
      # Attach the middleware to the router
      traefik.http.routers.owncloud.middlewares: "csp-headers"
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
