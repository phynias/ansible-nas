---
- name: Create Traefik Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ traefik_data_directory }}"
    - "{{ traefik_data_directory }}/letsencrypt"
    - "{{ traefik_data_directory }}/certs_dump"

- name: check if config is a dir
  stat:
    path: "{{ traefik_data_directory }}/traefik.toml"
  register: register_check

- name: Delete content & directory
  file:
    state: absent
    path: "{{ traefik_data_directory }}/traefik.toml"
  when: register_check.stat.exists

- name: Template Traefik config.toml
  template:
    src: traefik.toml
    dest: "{{ traefik_data_directory }}/traefik.toml"
  register: template_config

- name: Template Traefik middleware.yml
  template:
    src:  middleware.yml
    dest: "{{ traefik_data_directory }}/rules/middleware.yml"

- name: Traefik Docker Container
  docker_container:
    name: traefik
    log_driver: json-file
    log_options:
      max-size: 256m
      max-file: "1"
    image: "{{ traefik_docker_image }}"
    pull: true
    command:
      - "--providers.docker=true"
      - "--docker"
      - "--serverstransport.insecureskipverify=true"
      - "--traefikLogsFile=/logs/traefik.log"
    networks:
      - name: bridge
      - name: nas_bridge
      - name: piholedhcp
    ports:
      - "{{ traefik_port_http }}:{{ traefik_port_http }}"
      - "{{ traefik_port_https }}:{{ traefik_port_https }}"
      - "{{ traefik_port_https_ext }}:{{ traefik_port_https_ext }}"
      - "{{ traefik_port_ui }}:{{ traefik_port_ui }}"
    volumes:
      - "{{ traefik_data_directory }}/traefik.toml:/etc/traefik/traefik.toml:ro"
      # - "{{ traefik_data_directory }}/.google.json:/etc/traefik/.google.json:ro"
      - "{{ traefik_data_directory }}/letsencrypt:/letsencrypt:rw"
      - "{{ traefik_data_directory }}/rules:/rules:ro"
      - "{{ traefik_data_directory }}/logs:/logs:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/etc/timezone:/etc/timezone:ro"
    env: "{{ traefik_environment_variables }}"
    restart_policy: unless-stopped
    recreate: "{{ 'yes' if docker_recreate else 'no' }}"
    memory: 1g
    force_kill: true
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.authelia.forwardauth.address: "http://authelia:9091/api/verify?rd=https://{{ authelia_hostname }}.{{ ansible_nas_domain }}/"
      traefik.http.middlewares.authelia.forwardauth.trustforwardheader: "true"
      traefik.http.middlewares.authelia.forwardauth.authresponseheaders: "Remote-User, Remote-Groups"
      traefik.frontend.headers.customFrameOptionsValue: "allow-from https://organizr.{{ ansible_nas_domain }}/"
      traefik.frontend.passHostHeader: "true"
      traefik.http.routers.traefik.rule: "Host(`{{ traefik_hostname }}.{{ ansible_nas_domain }}`)"
      traefik.http.routers.traefik.entrypoints: "traefik"
      traefik.http.routers.traefik.tls: "true"
      traefik.http.services.traefik.loadbalancer.server.port: "8083"
      traefik.http.routers.traefik.tls.certresolver: "letsencrypt"
      traefik.http.routers.traefik.tls.domains[0].main: "{{ ansible_nas_domain }}"
      traefik.http.routers.traefik.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
      autoheal: "true"
#      traefik.http.routers.traefik.middlewares: "basic_auth@file"

- name: certs-dumper
  docker_container:
    name: certs-dumper
    image: ldez/traefik-certs-dumper
    pull: true
    restart_policy: unless-stopped
    volumes:
      - "{{ traefik_data_directory }}/certs_dump:/data"
      - "{{ traefik_data_directory }}/letsencrypt:/letsencrypt:ro"
    labels:
      autoheal: "true"
    entrypoint: sh -c '
      apk add jq
      ; while ! [ -e /letsencrypt/acme.json ]
      || ! [ `jq ".[] | .Certificates | length" /letsencrypt/acme.json` != 0 ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --version v2 --watch
      --source /letsencrypt/acme.json --dest /data/certs'
