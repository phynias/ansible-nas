---
- name: Create pihole Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ pihole_data_directory }}"
    - "{{ pihole_data_directory }}/logs"
    - "{{ pihole_data_directory }}/pihole"
    - "{{ pihole_data_directory }}/dnsmasq.d"

- name: Create a pihole network
  docker_network:
    name: piholedhcp
    ipam_options:
      subnet: '10.0.0.0/16'
      gateway: 10.0.0.1
      iprange: '10.0.0.0/24'

- name: Get name of pihole net interface
  shell: ip route|grep 10.0.0.1|awk '{print $3}'
  register: pihole_int

- name: Get name of default interface
  shell: ip route|grep static|awk '{print $5}'
  register: default_int

- name: Setup dnsmasq fix
  template:
    src: templates/03-pihole-dhcp-dns-fix.conf.j2
    dest: "{{ pihole_data_directory }}/dnsmasq.d/03-pihole-dhcp-dns-fix.conf"

- name: Setup pihole docker-compose
  template:
    src: templates/docker-compose.yml.j2
    dest: "{{ role_path }}/files/docker-compose.yml"

- name: Deploy pihole Docker Compose stack
  docker_compose:
    recreate: "{{ 'always' if pihole_recreate else 'smart' }}"
    project_src: "{{ role_path }}/files"
    files:
    - docker-compose.yml

########

- name: check if config is a dir
  stat:
    path: "{{ pihole_data_directory }}/pihole/custom.list"
  register: register_check

- name: Delete content & directory
  file:
    state: absent
    path: "{{ pihole_data_directory }}/pihole/custom.list"
  when: register_check.stat.exists

- name: set custom dns list
  template:
    src: custom.list.j2
    dest: "{{ pihole_data_directory }}/pihole/custom.list"
    owner: nasuser
    group: nasuser
    mode: '0666'
  tags:
    - pihole
    - pihole_dns


- name: restart pihole dns
  command: docker exec pihole bash -c 'pihole restartdns reload'
  tags:
    - pihole
    - ihole_dns



#
#- name: cloudflared
#  docker_container:
#    name: cloudflared
#    log_driver: json-file
#    log_options:
#      max-size: 256m
#      max-file: 1
#    image: visibilityspots/cloudflared
#    restart_policy: unless-stopped
#    pull: false
#    recreate: "{{ 'yes' if docker_recreate else 'no' }}"
#    memory: 256m
#    env:
#      TZ: "{{ ansible_nas_timezone }}"
#    networks:
#      - name: pihole_net
#        ipv4_address: "10.0.0.2"
#    labels:
#      autoheal: "true"
#
#- name: piHole
#  docker_container:
#    name: pihole
#    log_driver: json-file
#    log_options:
#      max-size: 256m
#      max-file: 1
#    image: arevindh/pihole:latest
#    pull: false
#    volumes:
#      - "{{ pihole_data_directory }}/pihole:/etc/pihole"
#      - "{{ pihole_data_directory }}/dnsmasq.d:/etc/dnsmasq.d"
#      - "/tools/pihole:/tools:ro"
#    interactive: yes
#    ports:
#      - "53:53/tcp"
#      - "{{ nas_ip }}:53:53/udp"
#      - "67:67/udp"
##      - "8080:80"
#    env:
#      TZ: "{{ ansible_nas_timezone }}"
#      PUID: "{{ pihole_user_id }}"
#      PGID: "{{ pihole_group_id }}"
#      DNS1: "10.0.0.2#5054"
#      DNS2: "no"
#      DNSMASQ_LISTENING: "all"
#      ServerIP: "{{ pihole_ip }}"
#      WEBPASSWORD: ""
#      IPv6: "false"
#    dns_servers:
#      - "127.0.0.1"
#      - "1.1.1.1"
#    restart_policy: unless-stopped
#    networks:
#      - name: pihole_net
#        ipv4_address: "10.0.0.3"
#        links:
#          - cloudflared:cloudflared
#    recreate: "{{ 'yes' if pihole_recreate else 'no' }}"
#    capabilities:
#      - NET_ADMIN
#    memory: 256m
#    labels:
#      autoheal: "true"
#      traefik.enable: "{{ pihole_available_externally }}"
#      traefik.http.routers.pihole.rule: "Host(`{{ pihole_hostname }}.{{ ansible_nas_domain }}`)"
#      traefik.http.routers.pihole.tls.certresolver: "letsencrypt"
#      traefik.http.routers.pihole.tls.domains[0].main: "{{ ansible_nas_domain }}"
#      traefik.http.routers.pihole.tls.domains[0].sans: "*.{{ ansible_nas_domain }}"
#      traefik.http.services.pihole.loadbalancer.server.port: "80"
#
#- debug: var=pihole_custom
#
